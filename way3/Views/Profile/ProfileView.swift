//
//  ProfileView.swift
//  way3
//
//  Created by Claude on 17/09/2025.
//  Í∞ïÌôîÎêú ÌîÑÎ°úÌïÑ Î∑∞ - ÏÑ∏Í≥ÑÍ¥Ä Î™∞ÏûÖÍ≥º Ï∫êÎ¶≠ÌÑ∞ Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ïßï
//

import SwiftUI

// MARK: - Player Profile Model
struct PlayerProfile: Codable {
    var name: String
    var age: Int
    var gender: PlayerGender
    var profileImage: String? // Base64 encoded or URL
    var backgroundStory: String
    var tradeLevel: Int
    var totalEarnings: Int
    var tradingDays: Int

    enum PlayerGender: String, CaseIterable, Codable {
        case male = "ÎÇ®ÏÑ±"
        case female = "Ïó¨ÏÑ±"
        case nonBinary = "ÎÖºÎ∞îÏù¥ÎÑàÎ¶¨"

        var displayName: String { rawValue }
    }
}

// MARK: - PlayerProfile Conversion Extensions
extension PlayerProfile {
    // Player Î™®Îç∏ÏóêÏÑú PlayerProfileÎ°ú Î≥ÄÌôò
    init(from player: Player) {
        self.name = player.core.name
        self.age = player.core.age
        self.gender = PlayerProfile.PlayerGender(rawValue: player.core.gender) ?? .male
        self.profileImage = nil // Ï∂îÌõÑ ÌîÑÎ°úÌïÑ Ïù¥ÎØ∏ÏßÄ ÏãúÏä§ÌÖú Íµ¨ÌòÑ Ïãú Ïó∞Í≤∞
        self.backgroundStory = player.core.personality
        self.tradeLevel = player.core.level
        self.totalEarnings = player.core.money
        self.tradingDays = player.core.tradingDays
    }

    // ÏÑúÎ≤Ñ API ÏùëÎãµÏóêÏÑú PlayerProfileÎ°ú Î≥ÄÌôò
    static func from(apiResponse: PlayerDetail) -> PlayerProfile {
        return PlayerProfile(
            name: apiResponse.name,
            age: 28, // APIÏóê age ÌïÑÎìú Ï∂îÍ∞Ä ÌïÑÏöîÌïòÍ±∞ÎÇò Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
            gender: .male, // APIÏóê gender ÌïÑÎìú Ï∂îÍ∞Ä ÌïÑÏöîÌïòÍ±∞ÎÇò Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©
            profileImage: nil,
            backgroundStory: "", // APIÏóê backgroundStory ÌïÑÎìú Ï∂îÍ∞Ä ÌïÑÏöî
            tradeLevel: apiResponse.level ?? 1,
            totalEarnings: apiResponse.money,
            tradingDays: calculateTradingDays(from: apiResponse) // Î≥ÑÎèÑ Í≥ÑÏÇ∞ Ìï®Ïàò ÌïÑÏöî
        )
    }

    // Í±∞Îûò ÏùºÏàò Í≥ÑÏÇ∞ (ÏûÑÏãú Î°úÏßÅ)
    private static func calculateTradingDays(from apiResponse: PlayerDetail) -> Int {
        // Ïã§Ï†úÎ°úÎäî ÏÑúÎ≤ÑÏóêÏÑú Ï†úÍ≥µÌïòÍ±∞ÎÇò Î°úÏª¨ Í≥ÑÏÇ∞ Î°úÏßÅ Íµ¨ÌòÑ
        return max(1, apiResponse.level ?? 1 * 3) // Î†àÎ≤®Îãπ 3Ïùº Ï†ïÎèÑÎ°ú Ï∂îÏ†ï
    }
}

// MARK: - Player Extension for ProfileView Integration
extension Player {
    // PlayerProfile ÏÉùÏÑ±ÏùÑ ÏúÑÌïú convenience ÌîÑÎ°úÌçºÌã∞
    var profileRepresentation: PlayerProfile {
        return PlayerProfile(from: self)
    }

    // PlayerProfileÏóêÏÑú Player ÏóÖÎç∞Ïù¥Ìä∏
    mutating func updateFrom(profile: PlayerProfile) {
        self.core.name = profile.name
        self.core.age = profile.age
        self.core.gender = profile.gender.rawValue
        self.core.personality = profile.backgroundStory
        // tradeLevel, totalEarnings, tradingDaysÎäî Í≤åÏûÑ ÌîåÎ†àÏù¥Î°úÎßå Î≥ÄÍ≤ΩÎêòÏñ¥Ïïº Ìï®
    }
}

// MARK: - Backstory Manager
class BackstoryManager: ObservableObject {
    static let shared = BackstoryManager()

    private let backstoryIntro = """
    üèõÔ∏è Ï°∞ÏÑ†ÏãúÎåÄ Îßê, Í∞úÌôîÍ∏∞Ïùò Î∞îÎûåÏù¥ Î∂àÏñ¥Ïò§Îçò ÏãúÏ†à...

    ÎãπÏã†ÏùÄ ÌïúÎïå Î≤àÏòÅÌñàÎçò ÏÉÅÏù∏ Í∞ÄÎ¨∏Ïùò ÌõÑÏÜêÏûÖÎãàÎã§.
    ÌïòÏßÄÎßå ÏùºÏ†úÍ∞ïÏ†êÍ∏∞ÏôÄ Ï†ÑÏüÅÏùÑ Í±∞ÏπòÎ©∞ Í∞ÄÎ¨∏ÏùÄ Î™∞ÎùΩÌñàÍ≥†,
    Ïù¥Ï†ú Ïò§ÏßÅ ÎãπÏã†ÎßåÏù¥ Í∞ÄÎ¨∏Ïùò ÏòÅÍ¥ëÏùÑ ÎêòÏ∞æÏùÑ Ïàò ÏûàÏäµÎãàÎã§.

    "Î¨¥Ïó≠ÏúºÎ°ú ÎèàÏùÑ Î≤åÏñ¥ ÏßëÏïàÏùÑ ÏùºÏúºÏºú ÏÑ∏Ïö∞Îùº!"
    Ìï†ÏïÑÎ≤ÑÏßÄÏùò Ïú†Ïñ∏Ïù¥ Í∑ìÍ∞ÄÏóê Îß¥ÎèïÎãàÎã§.

    ÌòÑÎåÄÏùò ÏÑúÏö∏ÏóêÏÑú, ÎãπÏã†ÏùÄ ÏÉàÎ°úÏö¥ Î¨¥Ïó≠ Ï†úÍµ≠ÏùÑ Í±¥ÏÑ§Ìï¥Ïïº Ìï©ÎãàÎã§.
    ÏûëÏùÄ Í±∞ÎûòÎ∂ÄÌÑ∞ ÏãúÏûëÌï¥ÏÑú Í≤∞Íµ≠Ïóî ÎèôÏïÑÏãúÏïÑ ÏµúÍ≥†Ïùò ÏÉÅÏù∏Ïù¥ ÎêòÎäî Í≤ÉÏù¥ Î™©ÌëúÏûÖÎãàÎã§.

    üìú Í∞ÄÎ¨∏Ïùò Í≥ÑÎ≥¥:
    ‚Ä¢ Í≥†Ï°∞Î∂Ä: Ï°∞ÏÑ† ÌõÑÍ∏∞ ÎåÄÏÉÅÏù∏ (Ï†ÑÍµ≠ ÏÉÅÍ∂å Ïû•ÏïÖ)
    ‚Ä¢ Ï¶ùÏ°∞Î∂Ä: Í∞úÌôîÍ∏∞ Î¨¥Ïó≠ÏÉÅ (Ìï¥Ïô∏ ÏßÑÏ∂ú ÏãúÎèÑ)
    ‚Ä¢ Ï°∞Î∂Ä: ÏùºÏ†úÍ∞ïÏ†êÍ∏∞ Ï†ÄÌï≠ ÏÉÅÏù∏ (ÎØºÏ°± ÏûêÎ≥∏ ÏàòÌò∏)
    ‚Ä¢ Î∂ÄÏπú: 6.25 Ïù¥ÌõÑ Ïû¨Í∏∞ ÏãúÎèÑ (Ïã§Ìå®)
    ‚Ä¢ ÎãπÏã†: ÌòÑÎåÄÏùò Î¨¥Ïó≠ ÏòÅÏõÖ (ÎØ∏Îûò Ï∞ΩÏ°∞)

    ÏßÄÍ∏àÎ∂ÄÌÑ∞ ÎãπÏã†Ïùò Ïù¥ÏïºÍ∏∞Í∞Ä ÏãúÏûëÎê©ÎãàÎã§!
    """

    func getBackstoryText() -> String {
        return backstoryIntro
    }
}

struct ProfileView: View {
    @EnvironmentObject var authManager: AuthManager
    @EnvironmentObject var gameManager: GameManager
    @StateObject private var backstoryManager = BackstoryManager.shared
    @State private var showingBackstory = false
    @State private var showingProfileEditor = false
    @State private var showingImagePicker = false
    @State private var pickedImage: UIImage?
    @State private var isRefreshing = false

    // ÌòÑÏû¨ ÌîåÎ†àÏù¥Ïñ¥ ÌîÑÎ°úÌïÑ (ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò)
    private var currentProfile: PlayerProfile? {
        guard let player = gameManager.currentPlayer else { return nil }
        return player.profileRepresentation
    }

    var body: some View {
        NavigationView {
            Group {
                switch gameManager.profileViewState {
                case .loading:
                    ProfileLoadingView()
                case .loaded:
                    ProfileContentView(
                        profile: currentProfile,
                        isRefreshing: isRefreshing,
                        onRefresh: refreshProfile,
                        onEditProfile: { showingProfileEditor = true }
                    )
                case .error(let message):
                    ProfileErrorView(
                        message: message,
                        onRetry: loadProfile
                    )
                case .refreshing:
                    ProfileContentView(
                        profile: currentProfile,
                        isRefreshing: true,
                        onRefresh: refreshProfile,
                        onEditProfile: { showingProfileEditor = true }
                    )
                }
            }
            .background(Color.cyberpunkDarkBg)
            .navigationTitle("")
            .navigationBarHidden(true)
            .cyberpunkStatusBar(title: "OPERATIVE_PROFILE", status: "ONLINE")
        }
        .onAppear {
            loadProfile()
        }
        .refreshable {
            await refreshProfile()
        }
        .sheet(isPresented: $showingBackstory) {
            BackstoryView(backstory: backstoryManager.getBackstoryText())
        }
        .sheet(isPresented: $showingProfileEditor) {
            if let profile = currentProfile {
                ProfileEditorView(profile: .constant(profile)) { updatedProfile in
                    updateProfile(updatedProfile)
                }
            }
        }
        .sheet(isPresented: $showingImagePicker) {
            ImagePickerView(selectedImage: $pickedImage)
        }
    }

    // MARK: - Helper Methods
    private func loadProfile() {
        Task {
            await gameManager.smartLoadProfile()
        }
    }

    private func refreshProfile() async {
        isRefreshing = true
        await gameManager.refreshProfileData()
        isRefreshing = false
    }

    private func updateProfile(_ updatedProfile: PlayerProfile) {
        guard var player = gameManager.currentPlayer else { return }
        player.updateFrom(profile: updatedProfile)
        gameManager.currentPlayer = player

        // ÏÑúÎ≤ÑÏóê ÏóÖÎç∞Ïù¥Ìä∏ Ï†ÑÏÜ° (Ï∂îÌõÑ Íµ¨ÌòÑ)
        Task {
            // await gameManager.updatePlayerProfile(updatedProfile)
        }
    }
}

// MARK: - Profile Loading View
struct ProfileLoadingView: View {
    var body: some View {
        VStack(spacing: 20) {
            ProgressView()
                .scaleEffect(1.5)
                .progressViewStyle(CircularProgressViewStyle(tint: .cyberpunkGreen))

            Text("ÌîÑÎ°úÌïÑ Î°úÎî© Ï§ë...")
                .font(.cyberpunkBody())
                .foregroundColor(.cyberpunkGreen)

            Text("ÏÑúÎ≤ÑÏóêÏÑú ÏµúÏã† Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Í≥† ÏûàÏäµÎãàÎã§")
                .font(.cyberpunkCaption())
                .foregroundColor(.cyberpunkAccent)
                .multilineTextAlignment(.center)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(Color.cyberpunkDarkBg)
    }
}

// MARK: - Profile Content View
struct ProfileContentView: View {
    let profile: PlayerProfile?
    let isRefreshing: Bool
    let onRefresh: () async -> Void
    let onEditProfile: () -> Void

    @StateObject private var backstoryManager = BackstoryManager.shared

    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                if let profile = profile {
                    // Refresh Indicator
                    if isRefreshing {
                        HStack {
                            ProgressView()
                                .scaleEffect(0.8)
                            Text("ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...")
                                .font(.cyberpunkCaption())
                                .foregroundColor(.cyberpunkAccent)
                        }
                        .padding(.top, 10)
                    }

                    // Cyberpunk Profile Header
                    CyberpunkProfileHeader(
                        profile: profile,
                        onEditProfile: onEditProfile
                    )

                    // Cyberpunk Trading Dashboard
                    CyberpunkTradingDashboard(profile: profile)

                    // Cyberpunk Biography Panel
                    CyberpunkBiographyPanel(backgroundStory: backstoryManager.getBackstoryText())

                    // Cyberpunk Control Panel (Settings)
                    CyberpunkControlPanel()

                    Spacer(minLength: 100) // Tab bar spacing
                } else {
                    ProfileErrorView(
                        message: "ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§",
                        onRetry: {
                            Task { await onRefresh() }
                        }
                    )
                }
            }
        }
        .background(Color.cyberpunkDarkBg)
        .refreshable {
            await onRefresh()
        }
    }
}

// MARK: - Profile Error View
struct ProfileErrorView: View {
    let message: String
    let onRetry: () -> Void

    var body: some View {
        VStack(spacing: 20) {
            // Error Icon
            Image(systemName: "exclamationmark.triangle.fill")
                .font(.system(size: 60))
                .foregroundColor(.cyberpunkRed)

            // Error Title
            Text("Ïó∞Í≤∞ Ïò§Î•ò")
                .font(.cyberpunkHeading())
                .foregroundColor(.cyberpunkRed)

            // Error Message
            Text(message)
                .font(.cyberpunkBody())
                .foregroundColor(.cyberpunkAccent)
                .multilineTextAlignment(.center)
                .padding(.horizontal, 30)

            // Retry Button
            Button(action: onRetry) {
                HStack {
                    Image(systemName: "arrow.clockwise")
                    Text("Îã§Ïãú ÏãúÎèÑ")
                }
                .font(.cyberpunkButton())
                .foregroundColor(.cyberpunkDarkBg)
                .padding(.horizontal, 30)
                .padding(.vertical, 12)
                .background(
                    RoundedRectangle(cornerRadius: 8)
                        .fill(Color.cyberpunkGreen)
                        .shadow(color: .cyberpunkGreen.opacity(0.3), radius: 8, x: 0, y: 4)
                )
            }
            .buttonStyle(PlainButtonStyle())

            // Offline Notice
            VStack(spacing: 8) {
                Text("ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ±∞ÎÇò")
                    .font(.cyberpunkCaption())
                    .foregroundColor(.cyberpunkAccent)
                Text("Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî")
                    .font(.cyberpunkCaption())
                    .foregroundColor(.cyberpunkAccent)
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .background(Color.cyberpunkDarkBg)
    }
}
    }

    
// MARK: - Profile Image View
struct ProfileImageView: View {
    let profileImage: String?
    let onTap: () -> Void

    var body: some View {
        Button(action: onTap) {
            ZStack {
                if let profileImage = profileImage {
                    // TODO: Load actual image
                    AsyncImage(url: URL(string: profileImage)) { image in
                        image
                            .resizable()
                            .aspectRatio(contentMode: .fill)
                    } placeholder: {
                        Image(systemName: "person.crop.circle.fill")
                            .font(.system(size: 80))
                            .foregroundColor(.gray)
                    }
                    .frame(width: 120, height: 120)
                    .clipShape(Circle())
                } else {
                    // Default avatar
                    Circle()
                        .fill(
                            LinearGradient(
                                colors: [.blue.opacity(0.8), .purple.opacity(0.8)],
                                startPoint: .topLeading,
                                endPoint: .bottomTrailing
                            )
                        )
                        .frame(width: 120, height: 120)

                    Image(systemName: "person.fill")
                        .font(.system(size: 60))
                        .foregroundColor(.white)
                }

                // Camera icon overlay
                Circle()
                    .fill(Color(.systemBackground))
                    .frame(width: 36, height: 36)
                    .overlay(
                        Image(systemName: "camera.fill")
                            .font(.system(size: 16))
                            .foregroundColor(.blue)
                    )
                    .offset(x: 40, y: 40)
            }
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - Profile Stat View
struct ProfileStatView: View {
    let title: String
    let value: String
    let icon: String

    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.system(size: 20))
                .foregroundColor(.blue)

            Text(value)
                .font(.chosunSubhead)
                .fontWeight(.semibold)
                .foregroundColor(.primary)

            Text(title)
                .font(.chosunSmall)
                .foregroundColor(.secondary)
        }
    }
}

// MARK: - Trading Stat Card
struct TradingStatCard: View {
    let title: String
    let value: String
    let subtitle: String
    let color: Color
    let icon: String

    var body: some View {
        HStack(spacing: 16) {
            Image(systemName: icon)
                .font(.system(size: 30))
                .foregroundColor(color)
                .frame(width: 50, height: 50)
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(color.opacity(0.1))
                )

            VStack(alignment: .leading, spacing: 6) {
                Text(title)
                    .font(.chosunCaption)
                    .foregroundColor(.secondary)

                Text(value)
                    .font(.chosunH2)
                    .fontWeight(.bold)
                    .foregroundColor(color)

                Text(subtitle)
                    .font(.chosunSmall)
                    .foregroundColor(.secondary)
                    .lineLimit(2)
            }

            Spacer()
        }
        .padding(20)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color(.systemBackground))
                .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)
        )
    }
}

// MARK: - Settings Row View
struct SettingsRowView: View {
    let title: String
    let icon: String
    var color: Color = .blue
    let action: () -> Void

    var body: some View {
        Button(action: action) {
            HStack(spacing: 16) {
                Image(systemName: icon)
                    .font(.system(size: 20))
                    .foregroundColor(color)
                    .frame(width: 24, height: 24)

                Text(title)
                    .font(.chosunBody)
                    .foregroundColor(.primary)

                Spacer()

                Image(systemName: "chevron.right")
                    .font(.system(size: 14))
                    .foregroundColor(.gray)
            }
            .padding(.vertical, 12)
            .padding(.horizontal, 20)
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color(.systemBackground))
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - Backstory View
struct BackstoryView: View {
    let backstory: String
    @Environment(\.presentationMode) var presentationMode

    var body: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading, spacing: 24) {
                    // Header
                    VStack(spacing: 12) {
                        Image(systemName: "building.columns.fill")
                            .font(.system(size: 60))
                            .foregroundColor(.purple)

                        Text("ÏÉÅÏù∏ Í∞ÄÎ¨∏Ïùò Ïú†Îûò")
                            .font(.chosunTitle)
                            .fontWeight(.bold)
                            .foregroundColor(.primary)
                    }
                    .frame(maxWidth: .infinity)
                    .padding(.top, 20)

                    // Backstory Content
                    Text(backstory)
                        .font(.chosunBody)
                        .lineSpacing(8)
                        .foregroundColor(.primary)
                        .padding(.horizontal, 20)

                    // Call to Action
                    VStack(spacing: 16) {
                        Text("ÎãπÏã†Ïùò Î¨¥Ïó≠ Ï†úÍµ≠ÏùÑ Í±¥ÏÑ§ÌïòÏÑ∏Ïöî!")
                            .font(.chosunH2)
                            .fontWeight(.bold)
                            .foregroundColor(.blue)
                            .multilineTextAlignment(.center)

                        Button(action: {
                            presentationMode.wrappedValue.dismiss()
                        }) {
                            Text("Î¨¥Ïó≠ ÏãúÏûëÌïòÍ∏∞")
                                .font(.chosunButton)
                                .fontWeight(.semibold)
                                .foregroundColor(.white)
                                .frame(maxWidth: .infinity)
                                .frame(height: 50)
                                .background(
                                    RoundedRectangle(cornerRadius: 16)
                                        .fill(
                                            LinearGradient(
                                                colors: [.blue, .purple],
                                                startPoint: .leading,
                                                endPoint: .trailing
                                            )
                                        )
                                )
                        }
                    }
                    .padding(.horizontal, 20)
                    .padding(.top, 20)

                    Spacer(minLength: 50)
                }
            }
            .navigationTitle("Í∞ÄÎ¨∏Ïùò Ïó≠ÏÇ¨")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Îã´Í∏∞") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
            }
        }
    }
}

// MARK: - Profile Editor View
struct ProfileEditorView: View {
    @Binding var profile: PlayerProfile
    @Environment(\.presentationMode) var presentationMode
    @State private var editedProfile: PlayerProfile
    let onSave: (PlayerProfile) -> Void

    init(profile: Binding<PlayerProfile>, onSave: @escaping (PlayerProfile) -> Void = { _ in }) {
        self._profile = profile
        self._editedProfile = State(initialValue: profile.wrappedValue)
        self.onSave = onSave
    }

    var body: some View {
        NavigationView {
            Form {
                Section("Í∏∞Î≥∏ Ï†ïÎ≥¥") {
                    HStack {
                        Text("Ïù¥Î¶Ñ")
                        TextField("Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî", text: $editedProfile.name)
                            .font(.chosunBody)
                    }

                    HStack {
                        Text("ÎÇòÏù¥")
                        TextField("ÎÇòÏù¥", value: $editedProfile.age, format: .number)
                            .keyboardType(.numberPad)
                            .font(.chosunBody)
                    }

                    HStack {
                        Text("ÏÑ±Î≥Ñ")
                        Picker("ÏÑ±Î≥Ñ", selection: $editedProfile.gender) {
                            ForEach(PlayerProfile.PlayerGender.allCases, id: \.self) { gender in
                                Text(gender.displayName)
                                    .font(.chosunBody)
                                    .tag(gender)
                            }
                        }
                        .pickerStyle(SegmentedPickerStyle())
                    }
                }

                Section("Í∞úÏù∏ Ïä§ÌÜ†Î¶¨") {
                    VStack(alignment: .leading) {
                        Text("ÎãπÏã†ÎßåÏùò Î¨¥Ïó≠ Ïù¥ÏïºÍ∏∞Î•º Îì§Î†§Ï£ºÏÑ∏Ïöî")
                            .font(.chosunCaption)
                            .foregroundColor(.secondary)

                        TextEditor(text: $editedProfile.backgroundStory)
                            .font(.chosunBody)
                            .frame(minHeight: 100)
                    }
                }
            }
            .navigationTitle("ÌîÑÎ°úÌïÑ Ìé∏Ïßë")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Ï∑®ÏÜå") {
                        presentationMode.wrappedValue.dismiss()
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Ï†ÄÏû•") {
                        profile = editedProfile
                        onSave(editedProfile)
                        presentationMode.wrappedValue.dismiss()
                    }
                    .fontWeight(.semibold)
                }
            }
        }
    }
}


